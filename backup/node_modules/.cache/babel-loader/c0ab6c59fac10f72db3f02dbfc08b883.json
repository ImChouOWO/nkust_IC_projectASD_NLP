{"ast":null,"code":"import _slicedToArray from \"/home/ubuntu/pythonCode/projectASD/main/nkust_IC_projectASD_NLP/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport CloseOutlined from \"@ant-design/icons/es/icons/CloseOutlined\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport Button from '../button';\nimport defaultLocale from '../locale/en_US';\nimport useLocale from '../locale/useLocale';\nfunction isValidNode(node) {\n  return node !== undefined && node !== null;\n}\nvar TourPanel = function TourPanel(_ref) {\n  var stepProps = _ref.stepProps,\n    current = _ref.current,\n    type = _ref.type,\n    indicatorsRender = _ref.indicatorsRender;\n  var _a, _b;\n  var prefixCls = stepProps.prefixCls,\n    _stepProps$total = stepProps.total,\n    total = _stepProps$total === void 0 ? 1 : _stepProps$total,\n    title = stepProps.title,\n    onClose = stepProps.onClose,\n    onPrev = stepProps.onPrev,\n    onNext = stepProps.onNext,\n    onFinish = stepProps.onFinish,\n    cover = stepProps.cover,\n    description = stepProps.description,\n    nextButtonProps = stepProps.nextButtonProps,\n    prevButtonProps = stepProps.prevButtonProps,\n    stepType = stepProps.type,\n    arrow = stepProps.arrow,\n    className = stepProps.className;\n  var mergedType = typeof stepType !== 'undefined' ? stepType : type;\n  var isLastStep = current === total - 1;\n  var prevBtnClick = function prevBtnClick() {\n    var _a;\n    onPrev === null || onPrev === void 0 ? void 0 : onPrev();\n    (_a = prevButtonProps === null || prevButtonProps === void 0 ? void 0 : prevButtonProps.onClick) === null || _a === void 0 ? void 0 : _a.call(prevButtonProps);\n  };\n  var nextBtnClick = function nextBtnClick() {\n    var _a;\n    if (isLastStep) {\n      onFinish === null || onFinish === void 0 ? void 0 : onFinish();\n    } else {\n      onNext === null || onNext === void 0 ? void 0 : onNext();\n    }\n    (_a = nextButtonProps === null || nextButtonProps === void 0 ? void 0 : nextButtonProps.onClick) === null || _a === void 0 ? void 0 : _a.call(nextButtonProps);\n  };\n  var headerNode = isValidNode(title) ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-header\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-title\")\n  }, title)) : null;\n  var descriptionNode = isValidNode(description) ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-description\")\n  }, description) : null;\n  var coverNode = isValidNode(cover) ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-cover\")\n  }, cover) : null;\n  var mergeIndicatorNode;\n  if (indicatorsRender) {\n    mergeIndicatorNode = indicatorsRender(current, total);\n  } else {\n    mergeIndicatorNode = _toConsumableArray(Array.from({\n      length: total\n    }).keys()).map(function (stepItem, index) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        key: stepItem,\n        className: classNames(index === current && \"\".concat(prefixCls, \"-indicator-active\"), \"\".concat(prefixCls, \"-indicator\"))\n      });\n    });\n  }\n  var mainBtnType = mergedType === 'primary' ? 'default' : 'primary';\n  var secondaryBtnProps = {\n    type: 'default',\n    ghost: mergedType === 'primary'\n  };\n  var _useLocale = useLocale('Tour', defaultLocale.Tour),\n    _useLocale2 = _slicedToArray(_useLocale, 1),\n    contextLocale = _useLocale2[0];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(mergedType === 'primary' ? \"\".concat(prefixCls, \"-primary\") : '', className, \"\".concat(prefixCls, \"-content\"))\n  }, arrow && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-arrow\"),\n    key: \"arrow\"\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-inner\")\n  }, /*#__PURE__*/React.createElement(CloseOutlined, {\n    className: \"\".concat(prefixCls, \"-close\"),\n    onClick: onClose\n  }), coverNode, headerNode, descriptionNode, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-footer\")\n  }, total > 1 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-indicators\")\n  }, mergeIndicatorNode), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-buttons\")\n  }, current !== 0 ? /*#__PURE__*/React.createElement(Button, Object.assign({}, secondaryBtnProps, prevButtonProps, {\n    onClick: prevBtnClick,\n    size: \"small\",\n    className: classNames(\"\".concat(prefixCls, \"-prev-btn\"), prevButtonProps === null || prevButtonProps === void 0 ? void 0 : prevButtonProps.className)\n  }), (_a = prevButtonProps === null || prevButtonProps === void 0 ? void 0 : prevButtonProps.children) !== null && _a !== void 0 ? _a : contextLocale === null || contextLocale === void 0 ? void 0 : contextLocale.Previous) : null, /*#__PURE__*/React.createElement(Button, Object.assign({\n    type: mainBtnType\n  }, nextButtonProps, {\n    onClick: nextBtnClick,\n    size: \"small\",\n    className: classNames(\"\".concat(prefixCls, \"-next-btn\"), nextButtonProps === null || nextButtonProps === void 0 ? void 0 : nextButtonProps.className)\n  }), (_b = nextButtonProps === null || nextButtonProps === void 0 ? void 0 : nextButtonProps.children) !== null && _b !== void 0 ? _b : isLastStep ? contextLocale === null || contextLocale === void 0 ? void 0 : contextLocale.Finish : contextLocale === null || contextLocale === void 0 ? void 0 : contextLocale.Next)))));\n};\nexport default TourPanel;","map":null,"metadata":{},"sourceType":"module"}