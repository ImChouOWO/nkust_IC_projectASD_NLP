{"ast":null,"code":"import _defineProperty from \"/home/ubuntu/pythonCode/projectASD/main/nkust_IC_projectASD_NLP/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport classNames from 'classnames';\nimport React, { Children, forwardRef, useContext } from 'react';\nimport { ConfigContext } from '../config-provider';\nimport { Col } from '../grid';\nimport { cloneElement } from '../_util/reactNode';\nimport { ListContext } from './index';\nexport var Meta = function Meta(_a) {\n  var customizePrefixCls = _a.prefixCls,\n    className = _a.className,\n    avatar = _a.avatar,\n    title = _a.title,\n    description = _a.description,\n    others = __rest(_a, [\"prefixCls\", \"className\", \"avatar\", \"title\", \"description\"]);\n  var _useContext = useContext(ConfigContext),\n    getPrefixCls = _useContext.getPrefixCls;\n  var prefixCls = getPrefixCls('list', customizePrefixCls);\n  var classString = classNames(\"\".concat(prefixCls, \"-item-meta\"), className);\n  var content = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-item-meta-content\")\n  }, title && /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"\".concat(prefixCls, \"-item-meta-title\")\n  }, title), description && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-item-meta-description\")\n  }, description));\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, others, {\n    className: classString\n  }), avatar && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-item-meta-avatar\")\n  }, avatar), (title || description) && content);\n};\nvar InternalItem = function InternalItem(_a, ref) {\n  var customizePrefixCls = _a.prefixCls,\n    children = _a.children,\n    actions = _a.actions,\n    extra = _a.extra,\n    className = _a.className,\n    colStyle = _a.colStyle,\n    others = __rest(_a, [\"prefixCls\", \"children\", \"actions\", \"extra\", \"className\", \"colStyle\"]);\n  var _useContext2 = useContext(ListContext),\n    grid = _useContext2.grid,\n    itemLayout = _useContext2.itemLayout;\n  var _useContext3 = useContext(ConfigContext),\n    getPrefixCls = _useContext3.getPrefixCls;\n  var isItemContainsTextNodeAndNotSingular = function isItemContainsTextNodeAndNotSingular() {\n    var result;\n    Children.forEach(children, function (element) {\n      if (typeof element === 'string') {\n        result = true;\n      }\n    });\n    return result && Children.count(children) > 1;\n  };\n  var isFlexMode = function isFlexMode() {\n    if (itemLayout === 'vertical') {\n      return !!extra;\n    }\n    return !isItemContainsTextNodeAndNotSingular();\n  };\n  var prefixCls = getPrefixCls('list', customizePrefixCls);\n  var actionsContent = actions && actions.length > 0 && /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"\".concat(prefixCls, \"-item-action\"),\n    key: \"actions\"\n  }, actions.map(function (action, i) {\n    return /*#__PURE__*/(\n      // eslint-disable-next-line react/no-array-index-key\n      React.createElement(\"li\", {\n        key: \"\".concat(prefixCls, \"-item-action-\").concat(i)\n      }, action, i !== actions.length - 1 && /*#__PURE__*/React.createElement(\"em\", {\n        className: \"\".concat(prefixCls, \"-item-action-split\")\n      }))\n    );\n  }));\n  var Element = grid ? 'div' : 'li';\n  var itemChildren = /*#__PURE__*/React.createElement(Element, Object.assign({}, others, !grid ? {\n    ref: ref\n  } : {}, {\n    className: classNames(\"\".concat(prefixCls, \"-item\"), _defineProperty({}, \"\".concat(prefixCls, \"-item-no-flex\"), !isFlexMode()), className)\n  }), itemLayout === 'vertical' && extra ? [/*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-item-main\"),\n    key: \"content\"\n  }, children, actionsContent), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-item-extra\"),\n    key: \"extra\"\n  }, extra)] : [children, actionsContent, cloneElement(extra, {\n    key: 'extra'\n  })]);\n  return grid ? /*#__PURE__*/React.createElement(Col, {\n    ref: ref,\n    flex: 1,\n    style: colStyle\n  }, itemChildren) : itemChildren;\n};\nvar Item = /*#__PURE__*/forwardRef(InternalItem);\nItem.Meta = Meta;\nexport default Item;","map":null,"metadata":{},"sourceType":"module"}