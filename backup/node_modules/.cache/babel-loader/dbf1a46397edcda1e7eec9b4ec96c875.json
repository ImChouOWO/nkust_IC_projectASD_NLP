{"ast":null,"code":"import _defineProperty from \"/home/ubuntu/pythonCode/projectASD/main/nkust_IC_projectASD_NLP/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\n// ============================== Row-Shared ==============================\nvar genGridRowStyle = function genGridRowStyle(token) {\n  var componentCls = token.componentCls;\n  return _defineProperty({}, componentCls, {\n    display: 'flex',\n    flexFlow: 'row wrap',\n    minWidth: 0,\n    '&::before, &::after': {\n      display: 'flex'\n    },\n    '&-no-wrap': {\n      flexWrap: 'nowrap'\n    },\n    // The origin of the X-axis\n    '&-start': {\n      justifyContent: 'flex-start'\n    },\n    // The center of the X-axis\n    '&-center': {\n      justifyContent: 'center'\n    },\n    // The opposite of the X-axis\n    '&-end': {\n      justifyContent: 'flex-end'\n    },\n    '&-space-between': {\n      justifyContent: 'space-between'\n    },\n    '&-space-around ': {\n      justifyContent: 'space-around'\n    },\n    // Align at the top\n    '&-top': {\n      alignItems: 'flex-start'\n    },\n    // Align at the center\n    '&-middle': {\n      alignItems: 'center'\n    },\n    '&-bottom': {\n      alignItems: 'flex-end'\n    }\n  });\n};\n// ============================== Col-Shared ==============================\nvar genGridColStyle = function genGridColStyle(token) {\n  var componentCls = token.componentCls;\n  return _defineProperty({}, componentCls, {\n    position: 'relative',\n    maxWidth: '100%',\n    // Prevent columns from collapsing when empty\n    minHeight: 1\n  });\n};\nvar genLoopGridColumnsStyle = function genLoopGridColumnsStyle(token, sizeCls) {\n  var componentCls = token.componentCls,\n    gridColumns = token.gridColumns;\n  var gridColumnsStyle = {};\n  for (var i = gridColumns; i >= 0; i--) {\n    if (i === 0) {\n      gridColumnsStyle[\"\".concat(componentCls).concat(sizeCls, \"-\").concat(i)] = {\n        display: 'none'\n      };\n      gridColumnsStyle[\"\".concat(componentCls, \"-push-\").concat(i)] = {\n        insetInlineStart: 'auto'\n      };\n      gridColumnsStyle[\"\".concat(componentCls, \"-pull-\").concat(i)] = {\n        insetInlineEnd: 'auto'\n      };\n      gridColumnsStyle[\"\".concat(componentCls).concat(sizeCls, \"-push-\").concat(i)] = {\n        insetInlineStart: 'auto'\n      };\n      gridColumnsStyle[\"\".concat(componentCls).concat(sizeCls, \"-pull-\").concat(i)] = {\n        insetInlineEnd: 'auto'\n      };\n      gridColumnsStyle[\"\".concat(componentCls).concat(sizeCls, \"-offset-\").concat(i)] = {\n        marginInlineEnd: 0\n      };\n      gridColumnsStyle[\"\".concat(componentCls).concat(sizeCls, \"-order-\").concat(i)] = {\n        order: 0\n      };\n    } else {\n      gridColumnsStyle[\"\".concat(componentCls).concat(sizeCls, \"-\").concat(i)] = {\n        display: 'block',\n        flex: \"0 0 \".concat(i / gridColumns * 100, \"%\"),\n        maxWidth: \"\".concat(i / gridColumns * 100, \"%\")\n      };\n      gridColumnsStyle[\"\".concat(componentCls).concat(sizeCls, \"-push-\").concat(i)] = {\n        insetInlineStart: \"\".concat(i / gridColumns * 100, \"%\")\n      };\n      gridColumnsStyle[\"\".concat(componentCls).concat(sizeCls, \"-pull-\").concat(i)] = {\n        insetInlineEnd: \"\".concat(i / gridColumns * 100, \"%\")\n      };\n      gridColumnsStyle[\"\".concat(componentCls).concat(sizeCls, \"-offset-\").concat(i)] = {\n        marginInlineStart: \"\".concat(i / gridColumns * 100, \"%\")\n      };\n      gridColumnsStyle[\"\".concat(componentCls).concat(sizeCls, \"-order-\").concat(i)] = {\n        order: i\n      };\n    }\n  }\n  return gridColumnsStyle;\n};\nvar genGridStyle = function genGridStyle(token, sizeCls) {\n  return genLoopGridColumnsStyle(token, sizeCls);\n};\nvar genGridMediaStyle = function genGridMediaStyle(token, screenSize, sizeCls) {\n  return _defineProperty({}, \"@media (min-width: \".concat(screenSize, \"px)\"), Object.assign({}, genGridStyle(token, sizeCls)));\n};\n// ============================== Export ==============================\nexport var useRowStyle = genComponentStyleHook('Grid', function (token) {\n  return [genGridRowStyle(token)];\n});\nexport var useColStyle = genComponentStyleHook('Grid', function (token) {\n  var gridToken = mergeToken(token, {\n    gridColumns: 24 // Row is divided into 24 parts in Grid\n  });\n\n  var gridMediaSizesMap = {\n    '-sm': gridToken.screenSMMin,\n    '-md': gridToken.screenMDMin,\n    '-lg': gridToken.screenLGMin,\n    '-xl': gridToken.screenXLMin,\n    '-xxl': gridToken.screenXXLMin\n  };\n  return [genGridColStyle(gridToken), genGridStyle(gridToken, ''), genGridStyle(gridToken, '-xs'), Object.keys(gridMediaSizesMap).map(function (key) {\n    return genGridMediaStyle(gridToken, gridMediaSizesMap[key], key);\n  }).reduce(function (pre, cur) {\n    return Object.assign(Object.assign({}, pre), cur);\n  }, {})];\n});","map":null,"metadata":{},"sourceType":"module"}