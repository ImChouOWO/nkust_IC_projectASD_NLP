{"ast":null,"code":"import warning from \"rc-util/es/warning\";\nfunction warningProps(props) {\n  var onPopupVisibleChange = props.onPopupVisibleChange,\n    popupVisible = props.popupVisible,\n    popupClassName = props.popupClassName,\n    popupPlacement = props.popupPlacement;\n  warning(!onPopupVisibleChange, '`onPopupVisibleChange` is deprecated. Please use `onDropdownVisibleChange` instead.');\n  warning(popupVisible === undefined, '`popupVisible` is deprecated. Please use `open` instead.');\n  warning(popupClassName === undefined, '`popupClassName` is deprecated. Please use `dropdownClassName` instead.');\n  warning(popupPlacement === undefined, '`popupPlacement` is deprecated. Please use `placement` instead.');\n}\n\n// value in Cascader options should not be null\nexport function warningNullOptions(options, fieldNames) {\n  if (options) {\n    var recursiveOptions = function recursiveOptions(optionsList) {\n      for (var i = 0; i < optionsList.length; i++) {\n        var option = optionsList[i];\n        if (option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.value] === null) {\n          warning(false, '`value` in Cascader options should not be `null`.');\n          return true;\n        }\n        if (Array.isArray(option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.children]) && recursiveOptions(option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.children])) {\n          return true;\n        }\n      }\n    };\n    recursiveOptions(options);\n  }\n}\nexport default warningProps;","map":null,"metadata":{},"sourceType":"module"}