{"ast":null,"code":"import _defineProperty from \"/home/ubuntu/pythonCode/projectASD/main/nkust_IC_projectASD_NLP/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/ubuntu/pythonCode/projectASD/main/nkust_IC_projectASD_NLP/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport { convertChildrenToColumns } from \"rc-table/es/hooks/useColumns\";\nimport { INTERNAL_HOOKS } from \"rc-table/es/Table\";\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider/context';\nimport DefaultRenderEmpty from '../config-provider/defaultRenderEmpty';\nimport SizeContext from '../config-provider/SizeContext';\nimport useBreakpoint from '../grid/hooks/useBreakpoint';\nimport defaultLocale from '../locale/en_US';\nimport Pagination from '../pagination';\nimport Spin from '../spin';\nimport scrollTo from '../_util/scrollTo';\nimport warning from '../_util/warning';\nimport renderExpandIcon from './ExpandIcon';\nimport useFilter, { getFilterData } from './hooks/useFilter';\nimport useLazyKVMap from './hooks/useLazyKVMap';\nimport usePagination, { DEFAULT_PAGE_SIZE, getPaginationParam } from './hooks/usePagination';\nimport useSelection from './hooks/useSelection';\nimport useSorter, { getSortData } from './hooks/useSorter';\nimport useTitleColumns from './hooks/useTitleColumns';\nimport RcTable from './RcTable';\nimport useStyle from './style';\nvar EMPTY_LIST = [];\nfunction InternalTable(props, ref) {\n  var _classNames3;\n  var _React$useContext = React.useContext(ConfigContext),\n    getContextPopupContainer = _React$useContext.getPopupContainer;\n  var customizePrefixCls = props.prefixCls,\n    className = props.className,\n    rootClassName = props.rootClassName,\n    style = props.style,\n    customizeSize = props.size,\n    bordered = props.bordered,\n    customizeDropdownPrefixCls = props.dropdownPrefixCls,\n    dataSource = props.dataSource,\n    pagination = props.pagination,\n    rowSelection = props.rowSelection,\n    _props$rowKey = props.rowKey,\n    rowKey = _props$rowKey === void 0 ? 'key' : _props$rowKey,\n    rowClassName = props.rowClassName,\n    columns = props.columns,\n    children = props.children,\n    legacyChildrenColumnName = props.childrenColumnName,\n    onChange = props.onChange,\n    getPopupContainer = props.getPopupContainer,\n    loading = props.loading,\n    expandIcon = props.expandIcon,\n    expandable = props.expandable,\n    expandedRowRender = props.expandedRowRender,\n    expandIconColumnIndex = props.expandIconColumnIndex,\n    indentSize = props.indentSize,\n    scroll = props.scroll,\n    sortDirections = props.sortDirections,\n    locale = props.locale,\n    _props$showSorterTool = props.showSorterTooltip,\n    showSorterTooltip = _props$showSorterTool === void 0 ? true : _props$showSorterTool;\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== \"production\" ? warning(!(typeof rowKey === 'function' && rowKey.length > 1), 'Table', '`index` parameter of `rowKey` function is deprecated. There is no guarantee that it will work as expected.') : void 0;\n  }\n  var baseColumns = React.useMemo(function () {\n    return columns || convertChildrenToColumns(children);\n  }, [columns, children]);\n  var needResponsive = React.useMemo(function () {\n    return baseColumns.some(function (col) {\n      return col.responsive;\n    });\n  }, [baseColumns]);\n  var screens = useBreakpoint(needResponsive);\n  var mergedColumns = React.useMemo(function () {\n    var matched = new Set(Object.keys(screens).filter(function (m) {\n      return screens[m];\n    }));\n    return baseColumns.filter(function (c) {\n      return !c.responsive || c.responsive.some(function (r) {\n        return matched.has(r);\n      });\n    });\n  }, [baseColumns, screens]);\n  var tableProps = omit(props, ['className', 'style', 'columns']);\n  var size = React.useContext(SizeContext);\n  var _React$useContext2 = React.useContext(ConfigContext),\n    _React$useContext2$lo = _React$useContext2.locale,\n    contextLocale = _React$useContext2$lo === void 0 ? defaultLocale : _React$useContext2$lo,\n    direction = _React$useContext2.direction,\n    renderEmpty = _React$useContext2.renderEmpty,\n    getPrefixCls = _React$useContext2.getPrefixCls;\n  var mergedSize = customizeSize || size;\n  var tableLocale = Object.assign(Object.assign({}, contextLocale.Table), locale);\n  var rawData = dataSource || EMPTY_LIST;\n  var prefixCls = getPrefixCls('table', customizePrefixCls);\n  var dropdownPrefixCls = getPrefixCls('dropdown', customizeDropdownPrefixCls);\n  var mergedExpandable = Object.assign({\n    childrenColumnName: legacyChildrenColumnName,\n    expandIconColumnIndex: expandIconColumnIndex\n  }, expandable);\n  var _mergedExpandable$chi = mergedExpandable.childrenColumnName,\n    childrenColumnName = _mergedExpandable$chi === void 0 ? 'children' : _mergedExpandable$chi;\n  var expandType = React.useMemo(function () {\n    if (rawData.some(function (item) {\n      return item === null || item === void 0 ? void 0 : item[childrenColumnName];\n    })) {\n      return 'nest';\n    }\n    if (expandedRowRender || expandable && expandable.expandedRowRender) {\n      return 'row';\n    }\n    return null;\n  }, [rawData]);\n  var internalRefs = {\n    body: React.useRef()\n  };\n  // ============================ RowKey ============================\n  var getRowKey = React.useMemo(function () {\n    if (typeof rowKey === 'function') {\n      return rowKey;\n    }\n    return function (record) {\n      return record === null || record === void 0 ? void 0 : record[rowKey];\n    };\n  }, [rowKey]);\n  var _useLazyKVMap = useLazyKVMap(rawData, childrenColumnName, getRowKey),\n    _useLazyKVMap2 = _slicedToArray(_useLazyKVMap, 1),\n    getRecordByKey = _useLazyKVMap2[0]; // ============================ Events =============================\n  var changeEventInfo = {};\n  var triggerOnChange = function triggerOnChange(info, action) {\n    var reset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var changeInfo = Object.assign(Object.assign({}, changeEventInfo), info);\n    if (reset) {\n      changeEventInfo.resetPagination();\n      // Reset event param\n      if (changeInfo.pagination.current) {\n        changeInfo.pagination.current = 1;\n      }\n      // Trigger pagination events\n      if (pagination && pagination.onChange) {\n        pagination.onChange(1, changeInfo.pagination.pageSize);\n      }\n    }\n    if (scroll && scroll.scrollToFirstRowOnChange !== false && internalRefs.body.current) {\n      scrollTo(0, {\n        getContainer: function getContainer() {\n          return internalRefs.body.current;\n        }\n      });\n    }\n    onChange === null || onChange === void 0 ? void 0 : onChange(changeInfo.pagination, changeInfo.filters, changeInfo.sorter, {\n      currentDataSource: getFilterData(getSortData(rawData, changeInfo.sorterStates, childrenColumnName), changeInfo.filterStates),\n      action: action\n    });\n  };\n  /**\n   * Controlled state in `columns` is not a good idea that makes too many code (1000+ line?) to read\n   * state out and then put it back to title render. Move these code into `hooks` but still too\n   * complex. We should provides Table props like `sorter` & `filter` to handle control in next big\n   * version.\n   */\n  // ============================ Sorter =============================\n  var onSorterChange = function onSorterChange(sorter, sorterStates) {\n    triggerOnChange({\n      sorter: sorter,\n      sorterStates: sorterStates\n    }, 'sort', false);\n  };\n  var _useSorter = useSorter({\n      prefixCls: prefixCls,\n      mergedColumns: mergedColumns,\n      onSorterChange: onSorterChange,\n      sortDirections: sortDirections || ['ascend', 'descend'],\n      tableLocale: tableLocale,\n      showSorterTooltip: showSorterTooltip\n    }),\n    _useSorter2 = _slicedToArray(_useSorter, 4),\n    transformSorterColumns = _useSorter2[0],\n    sortStates = _useSorter2[1],\n    sorterTitleProps = _useSorter2[2],\n    getSorters = _useSorter2[3];\n  var sortedData = React.useMemo(function () {\n    return getSortData(rawData, sortStates, childrenColumnName);\n  }, [rawData, sortStates]);\n  changeEventInfo.sorter = getSorters();\n  changeEventInfo.sorterStates = sortStates;\n  // ============================ Filter ============================\n  var onFilterChange = function onFilterChange(filters, filterStates) {\n    triggerOnChange({\n      filters: filters,\n      filterStates: filterStates\n    }, 'filter', true);\n  };\n  var _useFilter = useFilter({\n      prefixCls: prefixCls,\n      locale: tableLocale,\n      dropdownPrefixCls: dropdownPrefixCls,\n      mergedColumns: mergedColumns,\n      onFilterChange: onFilterChange,\n      getPopupContainer: getPopupContainer || getContextPopupContainer\n    }),\n    _useFilter2 = _slicedToArray(_useFilter, 3),\n    transformFilterColumns = _useFilter2[0],\n    filterStates = _useFilter2[1],\n    filters = _useFilter2[2];\n  var mergedData = getFilterData(sortedData, filterStates);\n  changeEventInfo.filters = filters;\n  changeEventInfo.filterStates = filterStates;\n  // ============================ Column ============================\n  var columnTitleProps = React.useMemo(function () {\n    var mergedFilters = {};\n    Object.keys(filters).forEach(function (filterKey) {\n      if (filters[filterKey] !== null) {\n        mergedFilters[filterKey] = filters[filterKey];\n      }\n    });\n    return Object.assign(Object.assign({}, sorterTitleProps), {\n      filters: mergedFilters\n    });\n  }, [sorterTitleProps, filters]);\n  var _useTitleColumns = useTitleColumns(columnTitleProps),\n    _useTitleColumns2 = _slicedToArray(_useTitleColumns, 1),\n    transformTitleColumns = _useTitleColumns2[0]; // ========================== Pagination ==========================\n  var onPaginationChange = function onPaginationChange(current, pageSize) {\n    triggerOnChange({\n      pagination: Object.assign(Object.assign({}, changeEventInfo.pagination), {\n        current: current,\n        pageSize: pageSize\n      })\n    }, 'paginate');\n  };\n  var _usePagination = usePagination(mergedData.length, onPaginationChange, pagination),\n    _usePagination2 = _slicedToArray(_usePagination, 2),\n    mergedPagination = _usePagination2[0],\n    resetPagination = _usePagination2[1];\n  changeEventInfo.pagination = pagination === false ? {} : getPaginationParam(mergedPagination, pagination);\n  changeEventInfo.resetPagination = resetPagination;\n  // ============================= Data =============================\n  var pageData = React.useMemo(function () {\n    if (pagination === false || !mergedPagination.pageSize) {\n      return mergedData;\n    }\n    var _mergedPagination$cur = mergedPagination.current,\n      current = _mergedPagination$cur === void 0 ? 1 : _mergedPagination$cur,\n      total = mergedPagination.total,\n      _mergedPagination$pag = mergedPagination.pageSize,\n      pageSize = _mergedPagination$pag === void 0 ? DEFAULT_PAGE_SIZE : _mergedPagination$pag;\n    process.env.NODE_ENV !== \"production\" ? warning(current > 0, 'Table', '`current` should be positive number.') : void 0;\n    // Dynamic table data\n    if (mergedData.length < total) {\n      if (mergedData.length > pageSize) {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'Table', '`dataSource` length is less than `pagination.total` but large than `pagination.pageSize`. Please make sure your config correct data with async mode.') : void 0;\n        return mergedData.slice((current - 1) * pageSize, current * pageSize);\n      }\n      return mergedData;\n    }\n    return mergedData.slice((current - 1) * pageSize, current * pageSize);\n  }, [!!pagination, mergedData, mergedPagination && mergedPagination.current, mergedPagination && mergedPagination.pageSize, mergedPagination && mergedPagination.total]);\n  // ========================== Selections ==========================\n  var _useSelection = useSelection({\n      prefixCls: prefixCls,\n      data: mergedData,\n      pageData: pageData,\n      getRowKey: getRowKey,\n      getRecordByKey: getRecordByKey,\n      expandType: expandType,\n      childrenColumnName: childrenColumnName,\n      locale: tableLocale,\n      getPopupContainer: getPopupContainer || getContextPopupContainer\n    }, rowSelection),\n    _useSelection2 = _slicedToArray(_useSelection, 2),\n    transformSelectionColumns = _useSelection2[0],\n    selectedKeySet = _useSelection2[1];\n  var internalRowClassName = function internalRowClassName(record, index, indent) {\n    var mergedRowClassName;\n    if (typeof rowClassName === 'function') {\n      mergedRowClassName = classNames(rowClassName(record, index, indent));\n    } else {\n      mergedRowClassName = classNames(rowClassName);\n    }\n    return classNames(_defineProperty({}, \"\".concat(prefixCls, \"-row-selected\"), selectedKeySet.has(getRowKey(record, index))), mergedRowClassName);\n  };\n  // ========================== Expandable ==========================\n  // Pass origin render status into `rc-table`, this can be removed when refactor with `rc-table`\n  mergedExpandable.__PARENT_RENDER_ICON__ = mergedExpandable.expandIcon;\n  // Customize expandable icon\n  mergedExpandable.expandIcon = mergedExpandable.expandIcon || expandIcon || renderExpandIcon(tableLocale);\n  // Adjust expand icon index, no overwrite expandIconColumnIndex if set.\n  if (expandType === 'nest' && mergedExpandable.expandIconColumnIndex === undefined) {\n    mergedExpandable.expandIconColumnIndex = rowSelection ? 1 : 0;\n  } else if (mergedExpandable.expandIconColumnIndex > 0 && rowSelection) {\n    mergedExpandable.expandIconColumnIndex -= 1;\n  }\n  // Indent size\n  if (typeof mergedExpandable.indentSize !== 'number') {\n    mergedExpandable.indentSize = typeof indentSize === 'number' ? indentSize : 15;\n  }\n  // ============================ Render ============================\n  var transformColumns = React.useCallback(function (innerColumns) {\n    return transformTitleColumns(transformSelectionColumns(transformFilterColumns(transformSorterColumns(innerColumns))));\n  }, [transformSorterColumns, transformFilterColumns, transformSelectionColumns]);\n  var topPaginationNode;\n  var bottomPaginationNode;\n  if (pagination !== false && (mergedPagination === null || mergedPagination === void 0 ? void 0 : mergedPagination.total)) {\n    var paginationSize;\n    if (mergedPagination.size) {\n      paginationSize = mergedPagination.size;\n    } else {\n      paginationSize = mergedSize === 'small' || mergedSize === 'middle' ? 'small' : undefined;\n    }\n    var renderPagination = function renderPagination(position) {\n      return /*#__PURE__*/React.createElement(Pagination, Object.assign({}, mergedPagination, {\n        className: classNames(\"\".concat(prefixCls, \"-pagination \").concat(prefixCls, \"-pagination-\").concat(position), mergedPagination.className),\n        size: paginationSize\n      }));\n    };\n    var defaultPosition = direction === 'rtl' ? 'left' : 'right';\n    var position = mergedPagination.position;\n    if (position !== null && Array.isArray(position)) {\n      var topPos = position.find(function (p) {\n        return p.includes('top');\n      });\n      var bottomPos = position.find(function (p) {\n        return p.includes('bottom');\n      });\n      var isDisable = position.every(function (p) {\n        return \"\".concat(p) === 'none';\n      });\n      if (!topPos && !bottomPos && !isDisable) {\n        bottomPaginationNode = renderPagination(defaultPosition);\n      }\n      if (topPos) {\n        topPaginationNode = renderPagination(topPos.toLowerCase().replace('top', ''));\n      }\n      if (bottomPos) {\n        bottomPaginationNode = renderPagination(bottomPos.toLowerCase().replace('bottom', ''));\n      }\n    } else {\n      bottomPaginationNode = renderPagination(defaultPosition);\n    }\n  }\n  // >>>>>>>>> Spinning\n  var spinProps;\n  if (typeof loading === 'boolean') {\n    spinProps = {\n      spinning: loading\n    };\n  } else if (typeof loading === 'object') {\n    spinProps = Object.assign({\n      spinning: true\n    }, loading);\n  }\n  // Style\n  var _useStyle = useStyle(prefixCls),\n    _useStyle2 = _slicedToArray(_useStyle, 2),\n    wrapSSR = _useStyle2[0],\n    hashId = _useStyle2[1];\n  var wrapperClassNames = classNames(\"\".concat(prefixCls, \"-wrapper\"), _defineProperty({}, \"\".concat(prefixCls, \"-wrapper-rtl\"), direction === 'rtl'), className, rootClassName, hashId);\n  var emptyText = locale && locale.emptyText || (renderEmpty === null || renderEmpty === void 0 ? void 0 : renderEmpty('Table')) || /*#__PURE__*/React.createElement(DefaultRenderEmpty, {\n    componentName: \"Table\"\n  });\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref,\n    className: wrapperClassNames,\n    style: style\n  }, /*#__PURE__*/React.createElement(Spin, Object.assign({\n    spinning: false\n  }, spinProps), topPaginationNode, /*#__PURE__*/React.createElement(RcTable, Object.assign({}, tableProps, {\n    columns: mergedColumns,\n    direction: direction,\n    expandable: mergedExpandable,\n    prefixCls: prefixCls,\n    className: classNames((_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefixCls, \"-middle\"), mergedSize === 'middle'), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-small\"), mergedSize === 'small'), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-bordered\"), bordered), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-empty\"), rawData.length === 0), _classNames3)),\n    data: pageData,\n    rowKey: getRowKey,\n    rowClassName: internalRowClassName,\n    emptyText: emptyText,\n    // Internal\n    internalHooks: INTERNAL_HOOKS,\n    internalRefs: internalRefs,\n    transformColumns: transformColumns\n  })), bottomPaginationNode)));\n}\nexport default /*#__PURE__*/React.forwardRef(InternalTable);","map":null,"metadata":{},"sourceType":"module"}