{"ast":null,"code":"import _slicedToArray from '@babel/runtime/helpers/esm/slicedToArray';\nimport _toConsumableArray from '@babel/runtime/helpers/esm/toConsumableArray';\nimport _typeof from '@babel/runtime/helpers/esm/typeof';\nimport classNames from 'classnames';\nimport toArray from 'rc-util/es/Children/toArray';\nimport useMergedState from 'rc-util/es/hooks/useMergedState';\nimport React from 'react';\nimport CollapsePanel from './Panel';\nfunction getActiveKeysArray(activeKey) {\n  var currentActiveKey = activeKey;\n  if (!Array.isArray(currentActiveKey)) {\n    var activeKeyType = _typeof(currentActiveKey);\n    currentActiveKey = activeKeyType === 'number' || activeKeyType === 'string' ? [currentActiveKey] : [];\n  }\n  return currentActiveKey.map(function (key) {\n    return String(key);\n  });\n}\nvar Collapse = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$prefixCls = props.prefixCls,\n    prefixCls = _props$prefixCls === void 0 ? 'rc-collapse' : _props$prefixCls,\n    _props$destroyInactiv = props.destroyInactivePanel,\n    destroyInactivePanel = _props$destroyInactiv === void 0 ? false : _props$destroyInactiv,\n    style = props.style,\n    accordion = props.accordion,\n    className = props.className,\n    rawChildren = props.children,\n    collapsible = props.collapsible,\n    openMotion = props.openMotion,\n    expandIcon = props.expandIcon,\n    rawActiveKey = props.activeKey,\n    defaultActiveKey = props.defaultActiveKey,\n    _onChange = props.onChange;\n  var collapseClassName = classNames(prefixCls, className);\n  var _useMergedState = useMergedState([], {\n      value: rawActiveKey,\n      onChange: function onChange(v) {\n        return _onChange === null || _onChange === void 0 ? void 0 : _onChange(v);\n      },\n      defaultValue: defaultActiveKey,\n      postState: getActiveKeysArray\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    activeKey = _useMergedState2[0],\n    setActiveKey = _useMergedState2[1];\n  var onClickItem = function onClickItem(key) {\n    return setActiveKey(function () {\n      if (accordion) {\n        return activeKey[0] === key ? [] : [key];\n      }\n      var index = activeKey.indexOf(key);\n      var isActive = index > -1;\n      if (isActive) {\n        return activeKey.filter(function (item) {\n          return item !== key;\n        });\n      }\n      return [].concat(_toConsumableArray(activeKey), [key]);\n    });\n  };\n\n  // ======================== Children ========================\n  var getNewChild = function getNewChild(child, index) {\n    if (!child) return null;\n    var key = child.key || String(index);\n    var _child$props = child.props,\n      header = _child$props.header,\n      headerClass = _child$props.headerClass,\n      childDestroyInactivePanel = _child$props.destroyInactivePanel,\n      childCollapsible = _child$props.collapsible,\n      childOnItemClick = _child$props.onItemClick;\n    var isActive = false;\n    if (accordion) {\n      isActive = activeKey[0] === key;\n    } else {\n      isActive = activeKey.indexOf(key) > -1;\n    }\n    var mergeCollapsible = childCollapsible !== null && childCollapsible !== void 0 ? childCollapsible : collapsible;\n    var handleItemClick = function handleItemClick(value) {\n      if (mergeCollapsible === 'disabled') return;\n      onClickItem(value);\n      childOnItemClick === null || childOnItemClick === void 0 ? void 0 : childOnItemClick(value);\n    };\n    var childProps = {\n      key: key,\n      panelKey: key,\n      header: header,\n      headerClass: headerClass,\n      isActive: isActive,\n      prefixCls: prefixCls,\n      destroyInactivePanel: childDestroyInactivePanel !== null && childDestroyInactivePanel !== void 0 ? childDestroyInactivePanel : destroyInactivePanel,\n      openMotion: openMotion,\n      accordion: accordion,\n      children: child.props.children,\n      onItemClick: handleItemClick,\n      expandIcon: expandIcon,\n      collapsible: mergeCollapsible\n    };\n\n    // https://github.com/ant-design/ant-design/issues/20479\n    if (typeof child.type === 'string') {\n      return child;\n    }\n    Object.keys(childProps).forEach(function (propName) {\n      if (typeof childProps[propName] === 'undefined') {\n        delete childProps[propName];\n      }\n    });\n    return /*#__PURE__*/React.cloneElement(child, childProps);\n  };\n  var children = toArray(rawChildren).map(getNewChild);\n\n  // ======================== Render ========================\n  return /*#__PURE__*/React.createElement('div', {\n    ref: ref,\n    className: collapseClassName,\n    style: style,\n    role: accordion ? 'tablist' : undefined\n  }, children);\n});\nexport default Object.assign(Collapse, {\n  Panel: CollapsePanel\n});","map":null,"metadata":{},"sourceType":"module"}