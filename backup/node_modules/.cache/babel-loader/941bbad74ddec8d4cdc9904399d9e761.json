{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport React, { cloneElement, useRef } from 'react';\nimport classNames from 'classnames';\nimport { hasAddon, hasPrefixSuffix } from \"./utils/commonUtils\";\nvar BaseInput = function BaseInput(props) {\n  var _inputElement$props;\n  var inputElement = props.inputElement,\n    prefixCls = props.prefixCls,\n    prefix = props.prefix,\n    suffix = props.suffix,\n    addonBefore = props.addonBefore,\n    addonAfter = props.addonAfter,\n    className = props.className,\n    style = props.style,\n    affixWrapperClassName = props.affixWrapperClassName,\n    groupClassName = props.groupClassName,\n    wrapperClassName = props.wrapperClassName,\n    disabled = props.disabled,\n    readOnly = props.readOnly,\n    focused = props.focused,\n    triggerFocus = props.triggerFocus,\n    allowClear = props.allowClear,\n    value = props.value,\n    handleReset = props.handleReset,\n    hidden = props.hidden,\n    inputStyle = props.inputStyle,\n    classes = props.classes;\n  var containerRef = useRef(null);\n  var onInputClick = function onInputClick(e) {\n    var _containerRef$current;\n    if ((_containerRef$current = containerRef.current) !== null && _containerRef$current !== void 0 && _containerRef$current.contains(e.target)) {\n      triggerFocus === null || triggerFocus === void 0 ? void 0 : triggerFocus();\n    }\n  }; // ================== Clear Icon ================== //\n\n  var getClearIcon = function getClearIcon() {\n    var _classNames;\n    if (!allowClear) {\n      return null;\n    }\n    var needClear = !disabled && !readOnly && value;\n    var clearIconCls = \"\".concat(prefixCls, \"-clear-icon\");\n    var iconNode = _typeof(allowClear) === 'object' && allowClear !== null && allowClear !== void 0 && allowClear.clearIcon ? allowClear.clearIcon : 'âœ–';\n    return /*#__PURE__*/React.createElement(\"span\", {\n      onClick: handleReset // Do not trigger onBlur when clear input\n      // https://github.com/ant-design/ant-design/issues/31200\n      ,\n\n      onMouseDown: function onMouseDown(e) {\n        return e.preventDefault();\n      },\n      className: classNames(clearIconCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(clearIconCls, \"-hidden\"), !needClear), _defineProperty(_classNames, \"\".concat(clearIconCls, \"-has-suffix\"), !!suffix), _classNames)),\n      role: \"button\",\n      tabIndex: -1\n    }, iconNode);\n  };\n  var element = /*#__PURE__*/cloneElement(inputElement, {\n    value: value,\n    hidden: hidden,\n    style: _objectSpread(_objectSpread({}, (_inputElement$props = inputElement.props) === null || _inputElement$props === void 0 ? void 0 : _inputElement$props.style), inputStyle)\n  }); // ================== Prefix & Suffix ================== //\n\n  if (hasPrefixSuffix(props)) {\n    var _classNames2;\n    var affixWrapperPrefixCls = \"\".concat(prefixCls, \"-affix-wrapper\");\n    var affixWrapperCls = classNames(affixWrapperPrefixCls, (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(affixWrapperPrefixCls, \"-disabled\"), disabled), _defineProperty(_classNames2, \"\".concat(affixWrapperPrefixCls, \"-focused\"), focused), _defineProperty(_classNames2, \"\".concat(affixWrapperPrefixCls, \"-readonly\"), readOnly), _defineProperty(_classNames2, \"\".concat(affixWrapperPrefixCls, \"-input-with-clear-btn\"), suffix && allowClear && value), _classNames2), !hasAddon(props) && className, affixWrapperClassName, classes === null || classes === void 0 ? void 0 : classes.affixWrapper);\n    var suffixNode = (suffix || allowClear) && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-suffix\")\n    }, getClearIcon(), suffix);\n    element = /*#__PURE__*/React.createElement(\"span\", {\n      className: affixWrapperCls,\n      style: style,\n      hidden: !hasAddon(props) && hidden,\n      onClick: onInputClick,\n      ref: containerRef\n    }, prefix && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-prefix\")\n    }, prefix), /*#__PURE__*/cloneElement(inputElement, {\n      style: inputStyle !== null && inputStyle !== void 0 ? inputStyle : null,\n      value: value,\n      hidden: null\n    }), suffixNode);\n  } // ================== Addon ================== //\n\n  if (hasAddon(props)) {\n    var wrapperCls = \"\".concat(prefixCls, \"-group\");\n    var addonCls = \"\".concat(wrapperCls, \"-addon\");\n    var mergedWrapperClassName = classNames(\"\".concat(prefixCls, \"-wrapper\"), wrapperCls, wrapperClassName, classes === null || classes === void 0 ? void 0 : classes.wrapper);\n    var mergedGroupClassName = classNames(\"\".concat(prefixCls, \"-group-wrapper\"), className, groupClassName, classes === null || classes === void 0 ? void 0 : classes.group); // Need another wrapper for changing display:table to display:inline-block\n    // and put style prop in wrapper\n\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: mergedGroupClassName,\n      style: style,\n      hidden: hidden\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: mergedWrapperClassName\n    }, addonBefore && /*#__PURE__*/React.createElement(\"span\", {\n      className: addonCls\n    }, addonBefore), /*#__PURE__*/cloneElement(element, {\n      style: inputStyle !== null && inputStyle !== void 0 ? inputStyle : null,\n      hidden: null\n    }), addonAfter && /*#__PURE__*/React.createElement(\"span\", {\n      className: addonCls\n    }, addonAfter)));\n  }\n  return element;\n};\nexport default BaseInput;","map":null,"metadata":{},"sourceType":"module"}