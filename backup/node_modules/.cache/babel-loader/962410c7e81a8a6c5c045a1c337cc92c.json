{"ast":null,"code":"import _slicedToArray from \"/home/ubuntu/pythonCode/projectASD/main/nkust_IC_projectASD_NLP/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport MutateObserver from '@rc-component/mutate-observer';\nimport classNames from 'classnames';\nimport React, { useEffect, useRef } from 'react';\nimport { getPixelRatio, getStyleStr, reRendering, rotateWatermark } from './utils';\n/**\n * Base size of the canvas, 1 for parallel layout and 2 for alternate layout\n * Only alternate layout is currently supported\n */\nvar BaseSize = 2;\nvar FontGap = 3;\nvar Watermark = function Watermark(props) {\n  var _a, _b;\n  var _props$zIndex = props.zIndex,\n    zIndex = _props$zIndex === void 0 ? 9 : _props$zIndex,\n    _props$rotate = props.rotate,\n    rotate = _props$rotate === void 0 ? -22 : _props$rotate,\n    width = props.width,\n    height = props.height,\n    image = props.image,\n    content = props.content,\n    _props$font = props.font,\n    font = _props$font === void 0 ? {} : _props$font,\n    style = props.style,\n    className = props.className,\n    rootClassName = props.rootClassName,\n    _props$gap = props.gap,\n    gap = _props$gap === void 0 ? [100, 100] : _props$gap,\n    offset = props.offset,\n    children = props.children;\n  var _font$color = font.color,\n    color = _font$color === void 0 ? 'rgba(0,0,0,.15)' : _font$color,\n    _font$fontSize = font.fontSize,\n    fontSize = _font$fontSize === void 0 ? 16 : _font$fontSize,\n    _font$fontWeight = font.fontWeight,\n    fontWeight = _font$fontWeight === void 0 ? 'normal' : _font$fontWeight,\n    _font$fontStyle = font.fontStyle,\n    fontStyle = _font$fontStyle === void 0 ? 'normal' : _font$fontStyle,\n    _font$fontFamily = font.fontFamily,\n    fontFamily = _font$fontFamily === void 0 ? 'sans-serif' : _font$fontFamily;\n  var _gap = _slicedToArray(gap, 2),\n    gapX = _gap[0],\n    gapY = _gap[1];\n  var gapXCenter = gapX / 2;\n  var gapYCenter = gapY / 2;\n  var offsetLeft = (_a = offset === null || offset === void 0 ? void 0 : offset[0]) !== null && _a !== void 0 ? _a : gapXCenter;\n  var offsetTop = (_b = offset === null || offset === void 0 ? void 0 : offset[1]) !== null && _b !== void 0 ? _b : gapYCenter;\n  var getMarkStyle = function getMarkStyle() {\n    var markStyle = {\n      zIndex: zIndex,\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      width: '100%',\n      height: '100%',\n      pointerEvents: 'none',\n      backgroundRepeat: 'repeat'\n    };\n    /** Calculate the style of the offset */\n    var positionLeft = offsetLeft - gapXCenter;\n    var positionTop = offsetTop - gapYCenter;\n    if (positionLeft > 0) {\n      markStyle.left = \"\".concat(positionLeft, \"px\");\n      markStyle.width = \"calc(100% - \".concat(positionLeft, \"px)\");\n      positionLeft = 0;\n    }\n    if (positionTop > 0) {\n      markStyle.top = \"\".concat(positionTop, \"px\");\n      markStyle.height = \"calc(100% - \".concat(positionTop, \"px)\");\n      positionTop = 0;\n    }\n    markStyle.backgroundPosition = \"\".concat(positionLeft, \"px \").concat(positionTop, \"px\");\n    return markStyle;\n  };\n  var containerRef = useRef(null);\n  var watermarkRef = useRef();\n  var stopObservation = useRef(false);\n  var destroyWatermark = function destroyWatermark() {\n    if (watermarkRef.current) {\n      watermarkRef.current.remove();\n      watermarkRef.current = undefined;\n    }\n  };\n  var appendWatermark = function appendWatermark(base64Url, markWidth) {\n    var _a;\n    if (containerRef.current && watermarkRef.current) {\n      stopObservation.current = true;\n      watermarkRef.current.setAttribute('style', getStyleStr(Object.assign(Object.assign({}, getMarkStyle()), {\n        backgroundImage: \"url('\".concat(base64Url, \"')\"),\n        backgroundSize: \"\".concat((gapX + markWidth) * BaseSize, \"px\")\n      })));\n      (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.append(watermarkRef.current);\n      // Delayed execution\n      setTimeout(function () {\n        stopObservation.current = false;\n      });\n    }\n  };\n  /**\n   * Get the width and height of the watermark. The default values are as follows\n   * Image: [120, 64]; Content: It's calculated by content;\n   */\n  var getMarkSize = function getMarkSize(ctx) {\n    var defaultWidth = 120;\n    var defaultHeight = 64;\n    if (!image && ctx.measureText) {\n      ctx.font = \"\".concat(Number(fontSize), \"px \").concat(fontFamily);\n      var contents = Array.isArray(content) ? content : [content];\n      var widths = contents.map(function (item) {\n        return ctx.measureText(item).width;\n      });\n      defaultWidth = Math.ceil(Math.max.apply(Math, _toConsumableArray(widths)));\n      defaultHeight = Number(fontSize) * contents.length + (contents.length - 1) * FontGap;\n    }\n    return [width !== null && width !== void 0 ? width : defaultWidth, height !== null && height !== void 0 ? height : defaultHeight];\n  };\n  var fillTexts = function fillTexts(ctx, drawX, drawY, drawWidth, drawHeight) {\n    var ratio = getPixelRatio();\n    var mergedFontSize = Number(fontSize) * ratio;\n    ctx.font = \"\".concat(fontStyle, \" normal \").concat(fontWeight, \" \").concat(mergedFontSize, \"px/\").concat(drawHeight, \"px \").concat(fontFamily);\n    ctx.fillStyle = color;\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'top';\n    ctx.translate(drawWidth / 2, 0);\n    var contents = Array.isArray(content) ? content : [content];\n    contents === null || contents === void 0 ? void 0 : contents.forEach(function (item, index) {\n      ctx.fillText(item !== null && item !== void 0 ? item : '', drawX, drawY + index * (mergedFontSize + FontGap * ratio));\n    });\n  };\n  var drawText = function drawText(canvas, ctx, drawX, drawY, drawWidth, drawHeight, alternateRotateX, alternateRotateY, alternateDrawX, alternateDrawY, markWidth) {\n    fillTexts(ctx, drawX, drawY, drawWidth, drawHeight);\n    /** Fill the interleaved text after rotation */\n    ctx.restore();\n    rotateWatermark(ctx, alternateRotateX, alternateRotateY, rotate);\n    fillTexts(ctx, alternateDrawX, alternateDrawY, drawWidth, drawHeight);\n    appendWatermark(canvas.toDataURL(), markWidth);\n  };\n  var renderWatermark = function renderWatermark() {\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    if (ctx) {\n      if (!watermarkRef.current) {\n        watermarkRef.current = document.createElement('div');\n      }\n      var ratio = getPixelRatio();\n      var _getMarkSize = getMarkSize(ctx),\n        _getMarkSize2 = _slicedToArray(_getMarkSize, 2),\n        markWidth = _getMarkSize2[0],\n        markHeight = _getMarkSize2[1];\n      var canvasWidth = (gapX + markWidth) * ratio;\n      var canvasHeight = (gapY + markHeight) * ratio;\n      canvas.setAttribute('width', \"\".concat(canvasWidth * BaseSize, \"px\"));\n      canvas.setAttribute('height', \"\".concat(canvasHeight * BaseSize, \"px\"));\n      var drawX = gapX * ratio / 2;\n      var drawY = gapY * ratio / 2;\n      var drawWidth = markWidth * ratio;\n      var drawHeight = markHeight * ratio;\n      var rotateX = (drawWidth + gapX * ratio) / 2;\n      var rotateY = (drawHeight + gapY * ratio) / 2;\n      /** Alternate drawing parameters */\n      var alternateDrawX = drawX + canvasWidth;\n      var alternateDrawY = drawY + canvasHeight;\n      var alternateRotateX = rotateX + canvasWidth;\n      var alternateRotateY = rotateY + canvasHeight;\n      ctx.save();\n      rotateWatermark(ctx, rotateX, rotateY, rotate);\n      if (image) {\n        var img = new Image();\n        img.onload = function () {\n          ctx.drawImage(img, drawX, drawY, drawWidth, drawHeight);\n          /** Draw interleaved pictures after rotation */\n          ctx.restore();\n          rotateWatermark(ctx, alternateRotateX, alternateRotateY, rotate);\n          ctx.drawImage(img, alternateDrawX, alternateDrawY, drawWidth, drawHeight);\n          appendWatermark(canvas.toDataURL(), markWidth);\n        };\n        img.onerror = function () {\n          return drawText(canvas, ctx, drawX, drawY, drawWidth, drawHeight, alternateRotateX, alternateRotateY, alternateDrawX, alternateDrawY, markWidth);\n        };\n        img.crossOrigin = 'anonymous';\n        img.referrerPolicy = 'no-referrer';\n        img.src = image;\n      } else {\n        drawText(canvas, ctx, drawX, drawY, drawWidth, drawHeight, alternateRotateX, alternateRotateY, alternateDrawX, alternateDrawY, markWidth);\n      }\n    }\n  };\n  var onMutate = function onMutate(mutations) {\n    if (stopObservation.current) {\n      return;\n    }\n    mutations.forEach(function (mutation) {\n      if (reRendering(mutation, watermarkRef.current)) {\n        destroyWatermark();\n        renderWatermark();\n      }\n    });\n  };\n  useEffect(renderWatermark, [rotate, zIndex, width, height, image, content, color, fontSize, fontWeight, fontStyle, fontFamily, gapX, gapY, offsetLeft, offsetTop]);\n  return /*#__PURE__*/React.createElement(MutateObserver, {\n    onMutate: onMutate\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: containerRef,\n    className: classNames(className, rootClassName),\n    style: Object.assign({\n      position: 'relative'\n    }, style)\n  }, children));\n};\nif (process.env.NODE_ENV !== 'production') {\n  Watermark.displayName = 'Watermark';\n}\nexport default Watermark;","map":null,"metadata":{},"sourceType":"module"}