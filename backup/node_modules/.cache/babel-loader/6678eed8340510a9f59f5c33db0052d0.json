{"ast":null,"code":"import React, { useEffect, useRef } from 'react';\nimport { composeRef, supportRef } from \"rc-util/es/ref\";\nimport findDOMNode from \"rc-util/es/Dom/findDOMNode\";\nimport canUseDom from \"rc-util/es/Dom/canUseDom\";\nimport useEvent from \"rc-util/es/hooks/useEvent\";\nimport DomWrapper from \"./wapper\";\nvar defOptions = {\n  subtree: true,\n  childList: true,\n  attributeFilter: ['style', 'class']\n};\nvar MutateObserver = function MutateObserver(props) {\n  var children = props.children,\n    _props$options = props.options,\n    options = _props$options === void 0 ? defOptions : _props$options,\n    _props$onMutate = props.onMutate,\n    onMutate = _props$onMutate === void 0 ? function () {} : _props$onMutate;\n  var callback = useEvent(onMutate);\n  var wrapperRef = useRef(null);\n  var elementRef = React.useRef(null);\n  var canRef = /*#__PURE__*/React.isValidElement(children) && supportRef(children);\n  var originRef = canRef ? children === null || children === void 0 ? void 0 : children.ref : null;\n  var mergedRef = React.useMemo(function () {\n    return composeRef(originRef, elementRef);\n  }, [originRef, elementRef]);\n  useEffect(function () {\n    if (!canUseDom()) {\n      return;\n    }\n    var instance;\n    var currentElement = findDOMNode(originRef === null || originRef === void 0 ? void 0 : originRef.current) || findDOMNode(wrapperRef === null || wrapperRef === void 0 ? void 0 : wrapperRef.current);\n    if (currentElement && 'MutationObserver' in window) {\n      instance = new MutationObserver(callback);\n      instance.observe(currentElement, options);\n    }\n    return function () {\n      var _instance, _instance2;\n      (_instance = instance) === null || _instance === void 0 ? void 0 : _instance.takeRecords();\n      (_instance2 = instance) === null || _instance2 === void 0 ? void 0 : _instance2.disconnect();\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, originRef]);\n  if (!children) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error('MutationObserver need children props');\n    }\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(DomWrapper, {\n    ref: wrapperRef\n  }, canRef ? /*#__PURE__*/React.cloneElement(children, {\n    ref: mergedRef\n  }) : children);\n};\nexport default MutateObserver;","map":null,"metadata":{},"sourceType":"module"}