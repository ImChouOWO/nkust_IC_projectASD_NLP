{"ast":null,"code":"import _defineProperty from \"/home/ubuntu/pythonCode/projectASD/main/nkust_IC_projectASD_NLP/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/ubuntu/pythonCode/projectASD/main/nkust_IC_projectASD_NLP/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { forwardRef } from 'react';\nimport * as React from 'react';\nimport RcTextArea from 'rc-textarea';\nimport classNames from 'classnames';\nimport CloseCircleFilled from \"@ant-design/icons/es/icons/CloseCircleFilled\";\nimport { FormItemInputContext } from '../form/context';\nimport useStyle from './style';\nimport SizeContext from '../config-provider/SizeContext';\nimport { getMergedStatus, getStatusClassNames } from '../_util/statusUtils';\nimport { triggerFocus } from './Input';\nimport DisabledContext from '../config-provider/DisabledContext';\nimport { ConfigContext } from '../config-provider';\nvar TextArea = /*#__PURE__*/forwardRef(function (_a, ref) {\n  var _classNames, _classNames2;\n  var customizePrefixCls = _a.prefixCls,\n    _a$bordered = _a.bordered,\n    bordered = _a$bordered === void 0 ? true : _a$bordered,\n    customizeSize = _a.size,\n    customDisabled = _a.disabled,\n    customStatus = _a.status,\n    allowClear = _a.allowClear,\n    rest = __rest(_a, [\"prefixCls\", \"bordered\", \"size\", \"disabled\", \"status\", \"allowClear\"]);\n  var _React$useContext = React.useContext(ConfigContext),\n    getPrefixCls = _React$useContext.getPrefixCls,\n    direction = _React$useContext.direction; // ===================== Size =====================\n  var size = React.useContext(SizeContext);\n  var mergedSize = customizeSize || size;\n  // ===================== Disabled =====================\n  var disabled = React.useContext(DisabledContext);\n  var mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;\n  // ===================== Status =====================\n  var _React$useContext2 = React.useContext(FormItemInputContext),\n    contextStatus = _React$useContext2.status,\n    hasFeedback = _React$useContext2.hasFeedback,\n    feedbackIcon = _React$useContext2.feedbackIcon;\n  var mergedStatus = getMergedStatus(contextStatus, customStatus);\n  // ===================== Ref =====================\n  var innerRef = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    var _a;\n    return {\n      resizableTextArea: (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.resizableTextArea,\n      focus: function focus(option) {\n        var _a, _b;\n        triggerFocus((_b = (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.resizableTextArea) === null || _b === void 0 ? void 0 : _b.textArea, option);\n      },\n      blur: function blur() {\n        var _a;\n        return (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.blur();\n      }\n    };\n  });\n  var prefixCls = getPrefixCls('input', customizePrefixCls);\n  // Allow clear\n  var mergedAllowClear;\n  if (typeof allowClear === 'object' && (allowClear === null || allowClear === void 0 ? void 0 : allowClear.clearIcon)) {\n    mergedAllowClear = allowClear;\n  } else if (allowClear) {\n    mergedAllowClear = {\n      clearIcon: /*#__PURE__*/React.createElement(CloseCircleFilled, null)\n    };\n  }\n  // ===================== Style =====================\n  var _useStyle = useStyle(prefixCls),\n    _useStyle2 = _slicedToArray(_useStyle, 2),\n    wrapSSR = _useStyle2[0],\n    hashId = _useStyle2[1];\n  return wrapSSR( /*#__PURE__*/React.createElement(RcTextArea, Object.assign({}, rest, {\n    disabled: mergedDisabled,\n    allowClear: mergedAllowClear,\n    classes: {\n      affixWrapper: classNames(\"\".concat(prefixCls, \"-textarea-affix-wrapper\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-affix-wrapper-rtl\"), direction === 'rtl'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-affix-wrapper-borderless\"), !bordered), _defineProperty(_classNames, \"\".concat(prefixCls, \"-affix-wrapper-sm\"), mergedSize === 'small'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-affix-wrapper-lg\"), mergedSize === 'large'), _classNames), getStatusClassNames(\"\".concat(prefixCls, \"-affix-wrapper\"), mergedStatus), hashId),\n      countWrapper: classNames(\"\".concat(prefixCls, \"-textarea\"), \"\".concat(prefixCls, \"-textarea-show-count\"), hashId),\n      textarea: classNames((_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefixCls, \"-borderless\"), !bordered), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-sm\"), mergedSize === 'small'), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-lg\"), mergedSize === 'large'), _classNames2), getStatusClassNames(prefixCls, mergedStatus), hashId)\n    },\n    prefixCls: prefixCls,\n    suffix: hasFeedback && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-textarea-suffix\")\n    }, feedbackIcon),\n    ref: innerRef\n  })));\n});\nexport default TextArea;","map":null,"metadata":{},"sourceType":"module"}