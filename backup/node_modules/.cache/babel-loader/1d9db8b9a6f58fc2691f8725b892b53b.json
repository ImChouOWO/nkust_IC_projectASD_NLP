{"ast":null,"code":"import _slicedToArray from \"/home/ubuntu/pythonCode/projectASD/main/nkust_IC_projectASD_NLP/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useContext, useMemo } from 'react';\nimport { FormItemInputContext } from '../form/context';\nimport { Button, Group } from '../radio';\nimport Select from '../select';\nvar YearSelectOffset = 10;\nvar YearSelectTotal = 20;\nfunction YearSelect(props) {\n  var fullscreen = props.fullscreen,\n    validRange = props.validRange,\n    generateConfig = props.generateConfig,\n    locale = props.locale,\n    prefixCls = props.prefixCls,\n    value = props.value,\n    _onChange = props.onChange,\n    divRef = props.divRef;\n  var year = generateConfig.getYear(value || generateConfig.getNow());\n  var start = year - YearSelectOffset;\n  var end = start + YearSelectTotal;\n  if (validRange) {\n    start = generateConfig.getYear(validRange[0]);\n    end = generateConfig.getYear(validRange[1]) + 1;\n  }\n  var suffix = locale && locale.year === '年' ? '年' : '';\n  var options = [];\n  for (var index = start; index < end; index++) {\n    options.push({\n      label: \"\".concat(index).concat(suffix),\n      value: index\n    });\n  }\n  return /*#__PURE__*/React.createElement(Select, {\n    size: fullscreen ? undefined : 'small',\n    options: options,\n    value: year,\n    className: \"\".concat(prefixCls, \"-year-select\"),\n    onChange: function onChange(numYear) {\n      var newDate = generateConfig.setYear(value, numYear);\n      if (validRange) {\n        var _validRange = _slicedToArray(validRange, 2),\n          startDate = _validRange[0],\n          endDate = _validRange[1];\n        var newYear = generateConfig.getYear(newDate);\n        var newMonth = generateConfig.getMonth(newDate);\n        if (newYear === generateConfig.getYear(endDate) && newMonth > generateConfig.getMonth(endDate)) {\n          newDate = generateConfig.setMonth(newDate, generateConfig.getMonth(endDate));\n        }\n        if (newYear === generateConfig.getYear(startDate) && newMonth < generateConfig.getMonth(startDate)) {\n          newDate = generateConfig.setMonth(newDate, generateConfig.getMonth(startDate));\n        }\n      }\n      _onChange(newDate);\n    },\n    getPopupContainer: function getPopupContainer() {\n      return divRef.current;\n    }\n  });\n}\nfunction MonthSelect(props) {\n  var prefixCls = props.prefixCls,\n    fullscreen = props.fullscreen,\n    validRange = props.validRange,\n    value = props.value,\n    generateConfig = props.generateConfig,\n    locale = props.locale,\n    _onChange2 = props.onChange,\n    divRef = props.divRef;\n  var month = generateConfig.getMonth(value || generateConfig.getNow());\n  var start = 0;\n  var end = 11;\n  if (validRange) {\n    var _validRange2 = _slicedToArray(validRange, 2),\n      rangeStart = _validRange2[0],\n      rangeEnd = _validRange2[1];\n    var currentYear = generateConfig.getYear(value);\n    if (generateConfig.getYear(rangeEnd) === currentYear) {\n      end = generateConfig.getMonth(rangeEnd);\n    }\n    if (generateConfig.getYear(rangeStart) === currentYear) {\n      start = generateConfig.getMonth(rangeStart);\n    }\n  }\n  var months = locale.shortMonths || generateConfig.locale.getShortMonths(locale.locale);\n  var options = [];\n  for (var index = start; index <= end; index += 1) {\n    options.push({\n      label: months[index],\n      value: index\n    });\n  }\n  return /*#__PURE__*/React.createElement(Select, {\n    size: fullscreen ? undefined : 'small',\n    className: \"\".concat(prefixCls, \"-month-select\"),\n    value: month,\n    options: options,\n    onChange: function onChange(newMonth) {\n      _onChange2(generateConfig.setMonth(value, newMonth));\n    },\n    getPopupContainer: function getPopupContainer() {\n      return divRef.current;\n    }\n  });\n}\nfunction ModeSwitch(props) {\n  var prefixCls = props.prefixCls,\n    locale = props.locale,\n    mode = props.mode,\n    fullscreen = props.fullscreen,\n    onModeChange = props.onModeChange;\n  return /*#__PURE__*/React.createElement(Group, {\n    onChange: function onChange(_ref) {\n      var value = _ref.target.value;\n      onModeChange(value);\n    },\n    value: mode,\n    size: fullscreen ? undefined : 'small',\n    className: \"\".concat(prefixCls, \"-mode-switch\")\n  }, /*#__PURE__*/React.createElement(Button, {\n    value: \"month\"\n  }, locale.month), /*#__PURE__*/React.createElement(Button, {\n    value: \"year\"\n  }, locale.year));\n}\nfunction CalendarHeader(props) {\n  var prefixCls = props.prefixCls,\n    fullscreen = props.fullscreen,\n    mode = props.mode,\n    onChange = props.onChange,\n    onModeChange = props.onModeChange;\n  var divRef = React.useRef(null);\n  var formItemInputContext = useContext(FormItemInputContext);\n  var mergedFormItemInputContext = useMemo(function () {\n    return Object.assign(Object.assign({}, formItemInputContext), {\n      isFormItemInput: false\n    });\n  }, [formItemInputContext]);\n  var sharedProps = Object.assign(Object.assign({}, props), {\n    onChange: onChange,\n    fullscreen: fullscreen,\n    divRef: divRef\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-header\"),\n    ref: divRef\n  }, /*#__PURE__*/React.createElement(FormItemInputContext.Provider, {\n    value: mergedFormItemInputContext\n  }, /*#__PURE__*/React.createElement(YearSelect, Object.assign({}, sharedProps)), mode === 'month' && /*#__PURE__*/React.createElement(MonthSelect, Object.assign({}, sharedProps))), /*#__PURE__*/React.createElement(ModeSwitch, Object.assign({}, sharedProps, {\n    onModeChange: onModeChange\n  })));\n}\nexport default CalendarHeader;","map":null,"metadata":{},"sourceType":"module"}