{"ast":null,"code":"import _defineProperty from \"/home/ubuntu/pythonCode/projectASD/main/nkust_IC_projectASD_NLP/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/ubuntu/pythonCode/projectASD/main/nkust_IC_projectASD_NLP/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport classNames from 'classnames';\nimport omit from \"rc-util/es/omit\";\nimport React, { useMemo, useRef, useState } from 'react';\nimport Checkbox from '../checkbox';\nimport Dropdown from '../dropdown';\nimport { isValidElement } from '../_util/reactNode';\nimport { groupKeysMap } from '../_util/transKeys';\nimport DefaultListBody, { OmitProps } from './ListBody';\nimport Search from './search';\nvar defaultRender = function defaultRender() {\n  return null;\n};\nfunction isRenderResultPlainObject(result) {\n  return !!(result && !isValidElement(result) && Object.prototype.toString.call(result) === '[object Object]');\n}\nfunction getEnabledItemKeys(items) {\n  return items.filter(function (data) {\n    return !data.disabled;\n  }).map(function (data) {\n    return data.key;\n  });\n}\nvar TransferList = function TransferList(props) {\n  var _classNames;\n  var prefixCls = props.prefixCls,\n    _props$dataSource = props.dataSource,\n    dataSource = _props$dataSource === void 0 ? [] : _props$dataSource,\n    _props$titleText = props.titleText,\n    titleText = _props$titleText === void 0 ? '' : _props$titleText,\n    checkedKeys = props.checkedKeys,\n    disabled = props.disabled,\n    _props$showSearch = props.showSearch,\n    showSearch = _props$showSearch === void 0 ? false : _props$showSearch,\n    style = props.style,\n    searchPlaceholder = props.searchPlaceholder,\n    notFoundContent = props.notFoundContent,\n    selectAll = props.selectAll,\n    selectCurrent = props.selectCurrent,\n    selectInvert = props.selectInvert,\n    removeAll = props.removeAll,\n    removeCurrent = props.removeCurrent,\n    _props$showSelectAll = props.showSelectAll,\n    showSelectAll = _props$showSelectAll === void 0 ? true : _props$showSelectAll,\n    showRemove = props.showRemove,\n    pagination = props.pagination,\n    direction = props.direction,\n    itemsUnit = props.itemsUnit,\n    itemUnit = props.itemUnit,\n    selectAllLabel = props.selectAllLabel,\n    footer = props.footer,\n    renderList = props.renderList,\n    onItemSelectAll = props.onItemSelectAll,\n    onItemRemove = props.onItemRemove,\n    handleFilter = props.handleFilter,\n    handleClear = props.handleClear,\n    filterOption = props.filterOption,\n    _props$render = props.render,\n    render = _props$render === void 0 ? defaultRender : _props$render;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    filterValue = _useState2[0],\n    setFilterValue = _useState2[1];\n  var listBodyRef = useRef({});\n  var internalHandleFilter = function internalHandleFilter(e) {\n    setFilterValue(e.target.value);\n    handleFilter(e);\n  };\n  var internalHandleClear = function internalHandleClear() {\n    setFilterValue('');\n    handleClear();\n  };\n  var matchFilter = function matchFilter(text, item) {\n    if (filterOption) {\n      return filterOption(filterValue, item);\n    }\n    return text.includes(filterValue);\n  };\n  var renderListBody = function renderListBody(listProps) {\n    var bodyContent = renderList ? renderList(listProps) : null;\n    var customize = !!bodyContent;\n    if (!customize) {\n      bodyContent = /*#__PURE__*/React.createElement(DefaultListBody, Object.assign({\n        ref: listBodyRef\n      }, listProps));\n    }\n    return {\n      customize: customize,\n      bodyContent: bodyContent\n    };\n  };\n  var renderItem = function renderItem(item) {\n    var renderResult = render(item);\n    var isRenderResultPlain = isRenderResultPlainObject(renderResult);\n    return {\n      item: item,\n      renderedEl: isRenderResultPlain ? renderResult.label : renderResult,\n      renderedText: isRenderResultPlain ? renderResult.value : renderResult\n    };\n  };\n  var notFoundContentEle = useMemo(function () {\n    return Array.isArray(notFoundContent) ? notFoundContent[direction === 'left' ? 0 : 1] : notFoundContent;\n  }, [notFoundContent, direction]);\n  var _useMemo = useMemo(function () {\n      var filterItems = [];\n      var filterRenderItems = [];\n      dataSource.forEach(function (item) {\n        var renderedItem = renderItem(item);\n        if (filterValue && !matchFilter(renderedItem.renderedText, item)) {\n          return;\n        }\n        filterItems.push(item);\n        filterRenderItems.push(renderedItem);\n      });\n      return [filterItems, filterRenderItems];\n    }, [dataSource, filterValue]),\n    _useMemo2 = _slicedToArray(_useMemo, 2),\n    filteredItems = _useMemo2[0],\n    filteredRenderItems = _useMemo2[1];\n  var checkStatus = useMemo(function () {\n    if (checkedKeys.length === 0) {\n      return 'none';\n    }\n    var checkedKeysMap = groupKeysMap(checkedKeys);\n    if (filteredItems.every(function (item) {\n      return checkedKeysMap.has(item.key) || !!item.disabled;\n    })) {\n      return 'all';\n    }\n    return 'part';\n  }, [checkedKeys, filteredItems]);\n  var listBody = useMemo(function () {\n    var search = showSearch ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-body-search-wrapper\")\n    }, /*#__PURE__*/React.createElement(Search, {\n      prefixCls: \"\".concat(prefixCls, \"-search\"),\n      onChange: internalHandleFilter,\n      handleClear: internalHandleClear,\n      placeholder: searchPlaceholder,\n      value: filterValue,\n      disabled: disabled\n    })) : null;\n    var _renderListBody = renderListBody(Object.assign(Object.assign({}, omit(props, OmitProps)), {\n        filteredItems: filteredItems,\n        filteredRenderItems: filteredRenderItems,\n        selectedKeys: checkedKeys\n      })),\n      customize = _renderListBody.customize,\n      bodyContent = _renderListBody.bodyContent;\n    var bodyNode;\n    // We should wrap customize list body in a classNamed div to use flex layout.\n    if (customize) {\n      bodyNode = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-body-customize-wrapper\")\n      }, bodyContent);\n    } else {\n      bodyNode = filteredItems.length ? bodyContent : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-body-not-found\")\n      }, notFoundContentEle);\n    }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(showSearch ? \"\".concat(prefixCls, \"-body \").concat(prefixCls, \"-body-with-search\") : \"\".concat(prefixCls, \"-body\"))\n    }, search, bodyNode);\n  }, [showSearch, prefixCls, searchPlaceholder, filterValue, disabled, checkedKeys, filteredItems, filteredRenderItems, notFoundContentEle]);\n  var checkBox = /*#__PURE__*/React.createElement(Checkbox, {\n    disabled: dataSource.length === 0 || disabled,\n    checked: checkStatus === 'all',\n    indeterminate: checkStatus === 'part',\n    className: \"\".concat(prefixCls, \"-checkbox\"),\n    onChange: function onChange() {\n      // Only select enabled items\n      onItemSelectAll === null || onItemSelectAll === void 0 ? void 0 : onItemSelectAll(filteredItems.filter(function (item) {\n        return !item.disabled;\n      }).map(function (_ref) {\n        var key = _ref.key;\n        return key;\n      }), checkStatus !== 'all');\n    }\n  });\n  var getSelectAllLabel = function getSelectAllLabel(selectedCount, totalCount) {\n    if (selectAllLabel) {\n      return typeof selectAllLabel === 'function' ? selectAllLabel({\n        selectedCount: selectedCount,\n        totalCount: totalCount\n      }) : selectAllLabel;\n    }\n    var unit = totalCount > 1 ? itemsUnit : itemUnit;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, (selectedCount > 0 ? \"\".concat(selectedCount, \"/\") : '') + totalCount, \" \", unit);\n  };\n  // Custom Layout\n  var footerDom = footer && (footer.length < 2 ? footer(props) : footer(props, {\n    direction: direction\n  }));\n  var listCls = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-with-pagination\"), !!pagination), _defineProperty(_classNames, \"\".concat(prefixCls, \"-with-footer\"), !!footerDom), _classNames));\n  // ====================== Get filtered, checked item list ======================\n  var listFooter = footerDom ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-footer\")\n  }, footerDom) : null;\n  var checkAllCheckbox = !showRemove && !pagination && checkBox;\n  var items;\n  if (showRemove) {\n    items = [/* Remove Current Page */\n    pagination ? {\n      key: 'removeCurrent',\n      label: removeCurrent,\n      onClick: function onClick() {\n        var _a;\n        var pageKeys = getEnabledItemKeys((((_a = listBodyRef.current) === null || _a === void 0 ? void 0 : _a.items) || []).map(function (entity) {\n          return entity.item;\n        }));\n        onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove(pageKeys);\n      }\n    } : null, /* Remove All */\n    {\n      key: 'removeAll',\n      label: removeAll,\n      onClick: function onClick() {\n        onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove(getEnabledItemKeys(filteredItems));\n      }\n    }].filter(Boolean);\n  } else {\n    items = [{\n      key: 'selectAll',\n      label: selectAll,\n      onClick: function onClick() {\n        var keys = getEnabledItemKeys(filteredItems);\n        onItemSelectAll === null || onItemSelectAll === void 0 ? void 0 : onItemSelectAll(keys, keys.length !== checkedKeys.length);\n      }\n    }, pagination ? {\n      key: 'selectCurrent',\n      label: selectCurrent,\n      onClick: function onClick() {\n        var _a;\n        var pageItems = ((_a = listBodyRef.current) === null || _a === void 0 ? void 0 : _a.items) || [];\n        onItemSelectAll === null || onItemSelectAll === void 0 ? void 0 : onItemSelectAll(getEnabledItemKeys(pageItems.map(function (entity) {\n          return entity.item;\n        })), true);\n      }\n    } : null, {\n      key: 'selectInvert',\n      label: selectInvert,\n      onClick: function onClick() {\n        var _a;\n        var availableKeys = getEnabledItemKeys(pagination ? (((_a = listBodyRef.current) === null || _a === void 0 ? void 0 : _a.items) || []).map(function (entity) {\n          return entity.item;\n        }) : filteredItems);\n        var checkedKeySet = new Set(checkedKeys);\n        var newCheckedKeys = [];\n        var newUnCheckedKeys = [];\n        availableKeys.forEach(function (key) {\n          if (checkedKeySet.has(key)) {\n            newUnCheckedKeys.push(key);\n          } else {\n            newCheckedKeys.push(key);\n          }\n        });\n        onItemSelectAll === null || onItemSelectAll === void 0 ? void 0 : onItemSelectAll(newCheckedKeys, true);\n        onItemSelectAll === null || onItemSelectAll === void 0 ? void 0 : onItemSelectAll(newUnCheckedKeys, false);\n      }\n    }];\n  }\n  var dropdown = /*#__PURE__*/React.createElement(Dropdown, {\n    className: \"\".concat(prefixCls, \"-header-dropdown\"),\n    menu: {\n      items: items\n    },\n    disabled: disabled\n  }, /*#__PURE__*/React.createElement(DownOutlined, null));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: listCls,\n    style: style\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-header\")\n  }, showSelectAll ? /*#__PURE__*/React.createElement(React.Fragment, null, checkAllCheckbox, dropdown) : null, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-header-selected\")\n  }, getSelectAllLabel(checkedKeys.length, filteredItems.length)), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-header-title\")\n  }, titleText)), listBody, listFooter);\n};\nif (process.env.NODE_ENV !== 'production') {\n  TransferList.displayName = 'TransferList';\n}\nexport default TransferList;","map":null,"metadata":{},"sourceType":"module"}