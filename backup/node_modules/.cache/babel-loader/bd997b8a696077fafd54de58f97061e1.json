{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { responseImmutable, useContext } from '@rc-component/context';\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport Cell from \"../Cell\";\nimport TableContext from \"../context/TableContext\";\nimport devRenderTimes from \"../hooks/useRenderTimes\";\nimport { getColumnsKey } from \"../utils/valueUtil\";\nimport ExpandedRow from \"./ExpandedRow\";\nfunction BodyRow(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    devRenderTimes(props);\n  }\n  var className = props.className,\n    style = props.style,\n    record = props.record,\n    index = props.index,\n    renderIndex = props.renderIndex,\n    rowKey = props.rowKey,\n    rowExpandable = props.rowExpandable,\n    expandedKeys = props.expandedKeys,\n    onRow = props.onRow,\n    _props$indent = props.indent,\n    indent = _props$indent === void 0 ? 0 : _props$indent,\n    RowComponent = props.rowComponent,\n    cellComponent = props.cellComponent,\n    scopeCellComponent = props.scopeCellComponent,\n    childrenColumnName = props.childrenColumnName;\n  var _useContext = useContext(TableContext, ['prefixCls', 'fixedInfoList', 'flattenColumns', 'expandableType', 'expandRowByClick', 'onTriggerExpand', 'rowClassName', 'expandedRowClassName', 'indentSize', 'expandIcon', 'expandedRowRender', 'expandIconColumnIndex']),\n    prefixCls = _useContext.prefixCls,\n    fixedInfoList = _useContext.fixedInfoList,\n    flattenColumns = _useContext.flattenColumns,\n    expandableType = _useContext.expandableType,\n    expandRowByClick = _useContext.expandRowByClick,\n    onTriggerExpand = _useContext.onTriggerExpand,\n    rowClassName = _useContext.rowClassName,\n    expandedRowClassName = _useContext.expandedRowClassName,\n    indentSize = _useContext.indentSize,\n    expandIcon = _useContext.expandIcon,\n    expandedRowRender = _useContext.expandedRowRender,\n    expandIconColumnIndex = _useContext.expandIconColumnIndex;\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    expandRended = _React$useState2[0],\n    setExpandRended = _React$useState2[1];\n  if (process.env.NODE_ENV !== 'production') {\n    devRenderTimes(props);\n  }\n  var expanded = expandedKeys && expandedKeys.has(rowKey);\n  React.useEffect(function () {\n    if (expanded) {\n      setExpandRended(true);\n    }\n  }, [expanded]);\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record));\n  // Only when row is not expandable and `children` exist in record\n  var nestExpandable = expandableType === 'nest';\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\n  var mergedExpandable = rowSupportExpand || nestExpandable;\n\n  // ======================== Expandable =========================\n  var onExpandRef = React.useRef(onTriggerExpand);\n  onExpandRef.current = onTriggerExpand;\n  var onInternalTriggerExpand = function onInternalTriggerExpand() {\n    onExpandRef.current.apply(onExpandRef, arguments);\n  };\n\n  // =========================== onRow ===========================\n  var additionalProps = onRow === null || onRow === void 0 ? void 0 : onRow(record, index);\n  var onClick = function onClick(event) {\n    var _additionalProps$onCl;\n    if (expandRowByClick && mergedExpandable) {\n      onInternalTriggerExpand(record, event);\n    }\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    additionalProps === null || additionalProps === void 0 ? void 0 : (_additionalProps$onCl = additionalProps.onClick) === null || _additionalProps$onCl === void 0 ? void 0 : _additionalProps$onCl.call.apply(_additionalProps$onCl, [additionalProps, event].concat(args));\n  };\n\n  // ======================== Base tr row ========================\n  var computeRowClassName;\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, index, indent);\n  }\n  var columnsKey = getColumnsKey(flattenColumns);\n  var baseRowNode = /*#__PURE__*/React.createElement(RowComponent, _extends({}, additionalProps, {\n    \"data-row-key\": rowKey,\n    className: classNames(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), computeRowClassName, additionalProps && additionalProps.className),\n    style: _objectSpread(_objectSpread({}, style), additionalProps ? additionalProps.style : null),\n    onClick: onClick\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n      dataIndex = column.dataIndex,\n      columnClassName = column.className;\n    var key = columnsKey[colIndex];\n    var fixedInfo = fixedInfoList[colIndex];\n\n    // ============= Used for nest expandable =============\n    var appendCellNode;\n    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n      appendCellNode = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          paddingLeft: \"\".concat(indentSize * indent, \"px\")\n        },\n        className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n      }), expandIcon({\n        prefixCls: prefixCls,\n        expanded: expanded,\n        expandable: hasNestChildren,\n        record: record,\n        onExpand: onInternalTriggerExpand\n      }));\n    }\n    var additionalCellProps;\n    if (column.onCell) {\n      additionalCellProps = column.onCell(record, index);\n    }\n    return /*#__PURE__*/React.createElement(Cell, _extends({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      scope: column.rowScope,\n      component: column.rowScope ? scopeCellComponent : cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      renderIndex: renderIndex,\n      dataIndex: dataIndex,\n      render: render,\n      shouldCellUpdate: column.shouldCellUpdate,\n      expanded: appendCellNode && expanded\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  }));\n\n  // ======================== Expand Row =========================\n  var expandRowNode;\n  if (rowSupportExpand && (expandRended || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\n    expandRowNode = /*#__PURE__*/React.createElement(ExpandedRow, {\n      expanded: expanded,\n      className: classNames(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      component: RowComponent,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length,\n      isEmpty: false\n    }, expandContent);\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, baseRowNode, expandRowNode);\n}\nBodyRow.displayName = 'BodyRow';\nexport default responseImmutable(BodyRow);","map":null,"metadata":{},"sourceType":"module"}