{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"src\", \"alt\", \"onPreviewClose\", \"prefixCls\", \"previewPrefixCls\", \"placeholder\", \"fallback\", \"width\", \"height\", \"style\", \"preview\", \"className\", \"onClick\", \"onError\", \"wrapperClassName\", \"wrapperStyle\", \"rootClassName\", \"crossOrigin\", \"decoding\", \"loading\", \"referrerPolicy\", \"sizes\", \"srcSet\", \"useMap\", \"draggable\"],\n  _excluded2 = [\"src\", \"visible\", \"onVisibleChange\", \"getContainer\", \"mask\", \"maskClassName\", \"icons\", \"scaleStep\"];\nimport * as React from 'react';\nimport { useState } from 'react';\nimport cn from 'classnames';\nimport { getOffset } from \"rc-util/es/Dom/css\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport Preview from \"./Preview\";\nimport PreviewGroup, { context } from \"./PreviewGroup\";\nvar uuid = 0;\nfunction isImageValid(src) {\n  return new Promise(function (resolve) {\n    var img = document.createElement('img');\n    img.onerror = function () {\n      return resolve(false);\n    };\n    img.onload = function () {\n      return resolve(true);\n    };\n    img.src = src;\n  });\n}\nvar ImageInternal = function ImageInternal(_ref) {\n  var _imgCommonProps$style;\n  var imgSrc = _ref.src,\n    alt = _ref.alt,\n    onInitialPreviewClose = _ref.onPreviewClose,\n    _ref$prefixCls = _ref.prefixCls,\n    prefixCls = _ref$prefixCls === void 0 ? 'rc-image' : _ref$prefixCls,\n    _ref$previewPrefixCls = _ref.previewPrefixCls,\n    previewPrefixCls = _ref$previewPrefixCls === void 0 ? \"\".concat(prefixCls, \"-preview\") : _ref$previewPrefixCls,\n    placeholder = _ref.placeholder,\n    fallback = _ref.fallback,\n    width = _ref.width,\n    height = _ref.height,\n    style = _ref.style,\n    _ref$preview = _ref.preview,\n    preview = _ref$preview === void 0 ? true : _ref$preview,\n    className = _ref.className,\n    onClick = _ref.onClick,\n    onError = _ref.onError,\n    wrapperClassName = _ref.wrapperClassName,\n    wrapperStyle = _ref.wrapperStyle,\n    rootClassName = _ref.rootClassName,\n    crossOrigin = _ref.crossOrigin,\n    decoding = _ref.decoding,\n    loading = _ref.loading,\n    referrerPolicy = _ref.referrerPolicy,\n    sizes = _ref.sizes,\n    srcSet = _ref.srcSet,\n    useMap = _ref.useMap,\n    draggable = _ref.draggable,\n    otherProps = _objectWithoutProperties(_ref, _excluded);\n  var isCustomPlaceholder = placeholder && placeholder !== true;\n  var _ref2 = _typeof(preview) === 'object' ? preview : {},\n    previewSrc = _ref2.src,\n    _ref2$visible = _ref2.visible,\n    previewVisible = _ref2$visible === void 0 ? undefined : _ref2$visible,\n    _ref2$onVisibleChange = _ref2.onVisibleChange,\n    onPreviewVisibleChange = _ref2$onVisibleChange === void 0 ? onInitialPreviewClose : _ref2$onVisibleChange,\n    _ref2$getContainer = _ref2.getContainer,\n    getPreviewContainer = _ref2$getContainer === void 0 ? undefined : _ref2$getContainer,\n    previewMask = _ref2.mask,\n    maskClassName = _ref2.maskClassName,\n    icons = _ref2.icons,\n    scaleStep = _ref2.scaleStep,\n    dialogProps = _objectWithoutProperties(_ref2, _excluded2);\n  var src = previewSrc !== null && previewSrc !== void 0 ? previewSrc : imgSrc;\n  var isControlled = previewVisible !== undefined;\n  var _useMergedState = useMergedState(!!previewVisible, {\n      value: previewVisible,\n      onChange: onPreviewVisibleChange\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    isShowPreview = _useMergedState2[0],\n    setShowPreview = _useMergedState2[1];\n  var _useState = useState(isCustomPlaceholder ? 'loading' : 'normal'),\n    _useState2 = _slicedToArray(_useState, 2),\n    status = _useState2[0],\n    setStatus = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    mousePosition = _useState4[0],\n    setMousePosition = _useState4[1];\n  var isError = status === 'error';\n  var _React$useContext = React.useContext(context),\n    isPreviewGroup = _React$useContext.isPreviewGroup,\n    setCurrent = _React$useContext.setCurrent,\n    setGroupShowPreview = _React$useContext.setShowPreview,\n    setGroupMousePosition = _React$useContext.setMousePosition,\n    registerImage = _React$useContext.registerImage;\n  var _React$useState = React.useState(function () {\n      uuid += 1;\n      return uuid;\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    currentId = _React$useState2[0];\n  var canPreview = !!preview;\n  var isLoaded = React.useRef(false);\n  var onLoad = function onLoad() {\n    setStatus('normal');\n  };\n  var onPreview = function onPreview(e) {\n    if (!isControlled) {\n      var _getOffset = getOffset(e.target),\n        left = _getOffset.left,\n        top = _getOffset.top;\n      if (isPreviewGroup) {\n        setCurrent(currentId);\n        setGroupMousePosition({\n          x: left,\n          y: top\n        });\n      } else {\n        setMousePosition({\n          x: left,\n          y: top\n        });\n      }\n    }\n    if (isPreviewGroup) {\n      setGroupShowPreview(true);\n    } else {\n      setShowPreview(true);\n    }\n    onClick === null || onClick === void 0 ? void 0 : onClick(e);\n  };\n  var onPreviewClose = function onPreviewClose(e) {\n    e.stopPropagation();\n    setShowPreview(false);\n    if (!isControlled) {\n      setMousePosition(null);\n    }\n  };\n  var getImgRef = function getImgRef(img) {\n    isLoaded.current = false;\n    if (status !== 'loading') return;\n    if (img !== null && img !== void 0 && img.complete && (img.naturalWidth || img.naturalHeight)) {\n      isLoaded.current = true;\n      onLoad();\n    }\n  };\n  React.useEffect(function () {\n    isImageValid(src).then(function (isValid) {\n      if (!isValid) {\n        setStatus('error');\n      }\n    });\n  }, [src]);\n\n  // Keep order start\n  // Resolve https://github.com/ant-design/ant-design/issues/28881\n  // Only need unRegister when component unMount\n  React.useEffect(function () {\n    var unRegister = registerImage(currentId, src);\n    return unRegister;\n  }, []);\n  React.useEffect(function () {\n    registerImage(currentId, src, canPreview);\n  }, [src, canPreview]);\n  // Keep order end\n\n  React.useEffect(function () {\n    if (isError) {\n      setStatus('normal');\n    }\n    if (isCustomPlaceholder && !isLoaded.current) {\n      setStatus('loading');\n    }\n  }, [imgSrc]);\n  var wrapperClass = cn(prefixCls, wrapperClassName, rootClassName, _defineProperty({}, \"\".concat(prefixCls, \"-error\"), isError));\n  var mergedSrc = isError && fallback ? fallback : src;\n  var imgCommonProps = {\n    crossOrigin: crossOrigin,\n    decoding: decoding,\n    draggable: draggable,\n    loading: loading,\n    referrerPolicy: referrerPolicy,\n    sizes: sizes,\n    srcSet: srcSet,\n    useMap: useMap,\n    onError: onError,\n    alt: alt,\n    className: cn(\"\".concat(prefixCls, \"-img\"), _defineProperty({}, \"\".concat(prefixCls, \"-img-placeholder\"), placeholder === true), className),\n    style: _objectSpread({\n      height: height\n    }, style)\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", _extends({}, otherProps, {\n    className: wrapperClass,\n    onClick: canPreview ? onPreview : onClick,\n    style: _objectSpread({\n      width: width,\n      height: height\n    }, wrapperStyle)\n  }), /*#__PURE__*/React.createElement(\"img\", _extends({}, imgCommonProps, {\n    ref: getImgRef\n  }, isError && fallback ? {\n    src: fallback\n  } : {\n    onLoad: onLoad,\n    src: imgSrc\n  }, {\n    width: width,\n    height: height\n  })), status === 'loading' && /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-hidden\": \"true\",\n    className: \"\".concat(prefixCls, \"-placeholder\")\n  }, placeholder), previewMask && canPreview && /*#__PURE__*/React.createElement(\"div\", {\n    className: cn(\"\".concat(prefixCls, \"-mask\"), maskClassName),\n    style: {\n      display: ((_imgCommonProps$style = imgCommonProps.style) === null || _imgCommonProps$style === void 0 ? void 0 : _imgCommonProps$style.display) === 'none' ? 'none' : undefined\n    }\n  }, previewMask)), !isPreviewGroup && canPreview && /*#__PURE__*/React.createElement(Preview, _extends({\n    \"aria-hidden\": !isShowPreview,\n    visible: isShowPreview,\n    prefixCls: previewPrefixCls,\n    onClose: onPreviewClose,\n    mousePosition: mousePosition,\n    src: mergedSrc,\n    alt: alt,\n    getContainer: getPreviewContainer,\n    icons: icons,\n    scaleStep: scaleStep,\n    rootClassName: rootClassName\n  }, dialogProps)));\n};\nImageInternal.PreviewGroup = PreviewGroup;\nImageInternal.displayName = 'Image';\nexport default ImageInternal;","map":null,"metadata":{},"sourceType":"module"}